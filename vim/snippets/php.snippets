global !p

def namespace(snip, path):
    import os
    namespace = pathToNamespace(path)
    if (len(namespace) == 0):
        return ''
    return os.linesep + snip.mkline('namespace ' + namespace + ';') + os.linesep

def pathToNamespace(path):
    import re
    path = path.replace('\\', '/')

    parts = []
    for part in path.split('/'):
        if re.match('^[A-Z]', part):
            parts.append(part)
        else:
            parts = []
    parts.pop()

    return '\\'.join(parts)

endglobal

snippet class "Class file" !
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename`
{
    ${0}
}
endsnippet

snippet cclass "Symfony controller class" !
<?php
`!p snip.rv = namespace(snip, path)`
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

class `!p snip.rv = snip.basename` extends Controller
{
    ${0}
}
endsnippet

snippet act "Symfony controller action" !
/**
 * @Route(${1})
 * @Method("GET")
 * @Template
 */
public function ${2}Action(Request $request)
{
    ${0}
    return array();
}
endsnippet

snippet test "PHPUnit Test Case"
<?php
`!p snip.rv = namespace(snip, path)`
class `!p snip.rv = snip.basename` extends \PHPUnit_Framework_TestCase
{
    ${0}
}
endsnippet

snippet iface "Interface file" !
<?php
`!p snip.rv = namespace(snip, path)`
interface `!p snip.rv = snip.basename`
{
    ${0}
}
endsnippet

snippet con "Constructor"
public function __construct(${1})
{
    ${0}
}
endsnippet

snippet sg "PHP Class Setter Getter" !b
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;
    return $this;
}

public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet get "PHP Class Getter" !b
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;
}
endsnippet

snippet fpub "Class public function" !b
public function ${1}(${2})
{
    ${0};
}
endsnippet

snippet fpriv "Class private function" !b
private function ${1}(${2})
{
    ${0};
}
endsnippet

snippet func "function" !b
function ${1}(${2})
{
    ${0};
}
endsnippet

snippet eot "EOT heredoc" !
<<<EOT
${0}
EOT;
endsnippet

